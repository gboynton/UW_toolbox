function [err] = fitPsychometricFunction(params, results, funName)% [err] = fitPsychometricFunction(params, results, funcName)%% Calculates maximum likelihood fit of a psychometric function to% psychophysical results.%% Inputs:%   params           A structure containing parameters for the 'funName'%                    function to be fitted%%   results          A structure containing information stimuli intensity%                    and subject responses for each trial:%       intensity    Intensity values of stimuli shown for every trial%       response     Binary response for each trial, where 1 is correct and%                    0 is incorrect response, for each corresponding trial%                    from results.intensity%%   funName          The name of psychometric function to be fitted, string%                    (default: 'Weibull', see WEIBULL.m)%% Output:%   err              Negative of the maximum log likelihood probability%% Note:% - Dependencies: Weibull.m (if no 'funName' specified)% Written by G.M. Boynton - 11/13/2007% Edited by G.M. Boynton - 3/7/2008%   - Fixed 'hack' to keep params.t > 0 for Weibull function% Edited by Kelly Chang - February 13, 2017% Edited by Ione Fine - February 22, 2017%% Input Controlif ~exist('funName', 'var')    funName = 'Weibull';elseif strcmp('normcdf', funName)    funName='NormCDFS2P'; % conversion function, changes input from structure to list of parametersendif ~isfield(params, 't')    error('slope parameter t is not defined');endif ~isfield(params, 'b')    error('slope parameter b is not defined');endif ~isfield(params, 'g')    params.g=0.5;% chance performance, only used for Weibill functionendif ~isfield(params, 'e')    params.e=(0.5)^(1/3); % the  performance level which you consider threshold ~80 for (0.5)^(1/3), only used for Weibullend%% Fit Psychometric Function and Calculate Log-Likelihood Errorp = feval(funName, params, results.intensity);p = max(min(p, 0.995), 0.005); % adjust for calculating log likelihood% calculate negative maximum log likelihooderr = -sum(results.response.*log(p) + (1-results.response).*log(1-p));% exponential cost function if fitting negative params.ts in Weibullif strcmp(funName, 'Weibull')    err = err + (-min(params.t, 0))^2;end